{"version":3,"sources":["store.ts","constants/types.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","utils/api.ts","constants/api.ts","App.tsx","index.tsx"],"names":["initialState","todos","isLoading","getLoading","state","getTodos","store","createStore","action","type","value","filter","item","id","sort","a","b","title","localeCompare","Number","completed","user","name","mapDispatchToProps","deleteTodo","TodoItem","connect","props","todo","className","onClick","sortById","sortByName","sortByTitle","sortByStatus","TodoList","map","key","getDataFromServer","url","fetch","data","json","getUsers","users","getToddos","getTodosWithUser","Promise","all","todosWithUser","find","person","userId","setLoading","setTodos","handleStart","visibleTodos","length","ReactDOM","render","document","getElementById"],"mappings":"kTAaMA,EAAsB,CAC1BC,MAAO,GACPC,WAAW,GAyBAC,EAAa,SAACC,GAAD,OAAkBA,EAAMF,WACrCG,EAAW,SAACD,GAAD,OAAkBA,EAAMH,OA4CnCK,EAAQC,aA1CL,WAA8C,IAA7CH,EAA4C,uDAApCJ,EAAcQ,EAAsB,uCAC3D,OAAQA,EAAOC,MACb,ICEqB,YDDnB,OAAO,eACFL,EADL,CAEEH,MAAOO,EAAOE,QAElB,ICFuB,cDGrB,OAAO,eACFN,EADL,CAEEF,UAAWM,EAAOE,QAEtB,ICNsB,aDOpB,OAAO,eACFN,EADL,CAEEH,MAAO,YAAIG,EAAMH,OAAOU,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAOK,QAE9D,ICVyB,gBDWvB,OAAO,eACFT,EADL,CAEEH,MAAO,YAAIG,EAAMH,OAAOa,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAMC,cAAcF,EAAEC,YAEnE,ICZ0B,iBDaxB,OAAO,eACFb,EADL,CAEEH,MAAO,YAAIG,EAAMH,OAAOa,MAAK,SAACC,EAAGC,GAAJ,OAAUG,OAAOJ,EAAEK,WAAaD,OAAOH,EAAEI,gBAE1E,ICnBwB,eDoBtB,OAAO,eACFhB,EADL,CAEEH,MAAO,YAAIG,EAAMH,OAAOa,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEM,KAAKC,KAAKJ,cAAcF,EAAEK,KAAKC,WAE5E,ICvBsB,aDwBpB,OAAO,eACFlB,EADL,CAEEH,MAAO,YAAIG,EAAMH,OAAOa,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,GAAKG,EAAEH,QAEpD,QACE,OAAOT,KAMXJ,GElDIuB,EAAqB,CAAEC,WFbH,SAACX,GAAD,MAAiB,CACzCJ,KCwBwB,aDxBNI,QEcPY,EAAWC,YAAQ,KAAMH,EAAdG,EA7BmB,SAACC,GAAW,IAAD,EAMhDA,EAAMC,KAJRf,EAFkD,EAElDA,GACAQ,EAHkD,EAGlDA,KACAJ,EAJkD,EAIlDA,MACAG,EALkD,EAKlDA,UAGF,OACE,wBAAIS,UAAU,MACZ,wBAAIA,UAAU,MAAMhB,GACpB,wBAAIgB,UAAU,MAAMZ,GACpB,wBAAIY,UAAU,MAAMT,EAAY,MAAQ,MACxC,wBAAIS,UAAU,MAAMR,EAAKC,MACzB,wBAAIO,UAAU,MACZ,4BACEpB,KAAK,SACLoB,UAAU,uBACVC,QAAS,kBAAMH,EAAMH,WAAWX,KAHlC,eCmBFU,EAAqB,CACzBQ,SHZsB,iBAAO,CAC7BtB,KCkBwB,eENxBuB,WHhBwB,iBAAO,CAC/BvB,KCoB0B,iBEJ1BwB,YHpByB,iBAAO,CAChCxB,KCsB2B,kBEF3ByB,aHZ0B,iBAAO,CACjCzB,KCgB4B,oBEEjB0B,EAAWT,aAJA,SAACtB,GAAD,MAAmB,CACzCH,MAAOI,EAASD,MAG+BmB,EAAzBG,EAnCmB,SAACC,GAC1C,OACE,2BAAOE,UAAU,sBACf,2BAAOA,UAAU,SACf,wBAAIA,UAAU,MACZ,wBAAIA,UAAU,KAAKC,QAASH,EAAMI,UAAlC,MACA,wBAAIF,UAAU,KAAKC,QAASH,EAAMM,aAAlC,SACA,wBAAIJ,UAAU,KAAKC,QAASH,EAAMO,cAAlC,aACA,wBAAIL,UAAU,KAAKC,QAASH,EAAMK,YAAlC,QACA,wBAAIH,UAAU,MAAd,mBAGJ,2BAAOA,UAAU,SACdF,EAAM1B,MAAMmC,KAAI,SAACR,GAAD,OACf,kBAACH,EAAD,CACEY,IAAKT,EAAKf,GACVe,KAAMA,Y,QC7BZU,EAAiB,uCAAG,WAAUC,GAAV,eAAAxB,EAAA,sEACLyB,MAAM,GAAD,OCRF,wCDQE,OAAeD,IADf,cAClBE,EADkB,yBAGjBA,EAAKC,QAHY,2CAAH,sDAMjBC,EAAwC,uCAAG,4BAAA5B,EAAA,sEAC3BuB,ECbG,UDYwB,cACzCM,EADyC,yBAGxCA,GAHwC,2CAAH,qDAMxCC,EAAgC,uCAAG,4BAAA9B,EAAA,sEACnBuB,EClBG,UDiBgB,cACjCrC,EADiC,yBAGhCA,GAHgC,2CAAH,qDAMzB6C,EAA+C,uCAAG,oCAAA/B,EAAA,sEAChCgC,QAAQC,IAAI,CACvCH,IACAF,MAH2D,0CACtD1C,EADsD,KAC/C2C,EAD+C,KAMvDK,EAAgBhD,EAAMmC,KAAI,SAACR,GAC/B,IAAMP,EAAOuB,EAAMM,MAAK,SAACC,GAAD,OAA2BA,EAAOtC,KAAOe,EAAKwB,UAEtE,OAAO,eACFxB,EADL,CAEEP,YAXyD,kBAetD4B,GAfsD,2CAAH,qDE0BtD1B,EAAqB,CAAE8B,WN9BH,SAAC3C,GAAD,MAAqB,CAC7CD,KC0ByB,cD1BNC,UM6BoB4C,SNjCjB,SAAC5C,GAAD,MAA4B,CAClDD,KC4BuB,YD5BNC,WMuCJgB,eALS,SAACtB,GAAD,MAAmB,CACzCH,MAAOI,EAASD,GAChBF,UAAWC,EAAWC,MAGgBmB,EAAzBG,EApCQ,SAACC,GACtB,IAAM4B,EAAW,uCAAG,4BAAAxC,EAAA,6DAClBY,EAAM0B,YAAW,GADC,SAGSP,IAHT,OAGZU,EAHY,OAKlB7B,EAAM2B,SAASE,GACf7B,EAAM0B,YAAW,GANC,2CAAH,qDASjB,OACE,yBAAKxB,UAAU,OACb,wBAAIA,UAAU,SAAd,yBACEF,EAAM1B,MAAMwD,OAUV,kBAACtB,EAAD,MARA,4BACEN,UAAU,SACVpB,KAAK,SACLqB,QAASyB,GAER5B,EAAMzB,UAAY,iBAAmB,kBCpClDwD,IAASC,OACP,kBAAC,IAAD,CAAUrD,MAAOA,GACf,kBAAC,EAAD,OAEFsD,SAASC,eAAe,W","file":"static/js/main.19ee089d.chunk.js","sourcesContent":["import { AnyAction, createStore } from 'redux';\nimport {\n  SET_DELETE,\n  SET_LOADING,\n  SET_TODOS,\n  SORT_BY_ID,\n  SORT_BY_NAME,\n  SORT_BY_STATUS,\n  SORT_BY_TITLE,\n  State,\n  TodoWithUser,\n} from './constants/types';\n\nconst initialState: State = {\n  todos: [],\n  isLoading: false,\n};\n\nexport const setTodos = (value: TodoWithUser[]) => ({\n  type: SET_TODOS, value,\n});\nexport const setLoading = (value: boolean) => ({\n  type: SET_LOADING, value,\n});\nexport const deleteTodo = (id: number) => ({\n  type: SET_DELETE, id,\n});\nexport const sortByTitle = () => ({\n  type: SORT_BY_TITLE,\n});\nexport const sortByName = () => ({\n  type: SORT_BY_NAME,\n});\nexport const sortById = () => ({\n  type: SORT_BY_ID,\n});\nexport const sortByStatus = () => ({\n  type: SORT_BY_STATUS,\n});\n\nexport const getLoading = (state: State) => state.isLoading;\nexport const getTodos = (state: State) => state.todos;\n\nconst reduser = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.value,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.value,\n      };\n    case SET_DELETE:\n      return {\n        ...state,\n        todos: [...state.todos].filter(item => item.id !== action.id),\n      };\n    case SORT_BY_TITLE:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n    case SORT_BY_STATUS:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a, b) => Number(a.completed) - Number(b.completed)),\n      };\n    case SORT_BY_NAME:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n    case SORT_BY_ID:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a, b) => a.id - b.id),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reduser,\n  initialState,\n);\n","export interface Todo {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\ninterface Address {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n  geo: Geo;\n}\n\ninterface Geo {\n  lat: string;\n  lng: string;\n}\n\ninterface Company {\n  name: string;\n  catchPhrase: string;\n  bs: string;\n}\n\nexport interface UserInterface {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: Address;\n  phone: string;\n  website: string;\n  company: Company;\n}\n\nexport interface TodoWithUser extends Todo{\n  user: UserInterface;\n}\n\nexport interface State {\n  todos: TodoWithUser[];\n  isLoading: boolean;\n}\n\n\nexport const SET_TODOS = 'SET_TODOS';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_DELETE = 'SET_DELETE';\nexport const SORT_BY_TITLE = 'SORT_BY_TITLE';\nexport const SORT_BY_NAME = 'SORT_BY_NAME';\nexport const SORT_BY_ID = 'SORT_BY_ID';\nexport const SORT_BY_STATUS = 'SORT_BY_STATUS';\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { TodoWithUser } from '../../constants/types';\nimport { deleteTodo } from '../../store';\n\ninterface Props {\n  todo: TodoWithUser;\n  deleteTodo: (id: number) => void;\n}\n\nexport const TodoItemTemplate: FC<Props> = (props) => {\n  const {\n    id,\n    user,\n    title,\n    completed,\n  } = props.todo;\n\n  return (\n    <tr className=\"tr\">\n      <td className=\"td\">{id}</td>\n      <td className=\"td\">{title}</td>\n      <td className=\"td\">{completed ? 'YES' : 'NO'}</td>\n      <td className=\"td\">{user.name}</td>\n      <td className=\"td\">\n        <button\n          type=\"button\"\n          className=\"button button-delete\"\n          onClick={() => props.deleteTodo(id)}\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = { deleteTodo };\n\nexport const TodoItem = connect(null, mapDispatchToProps)(TodoItemTemplate);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { TodoWithUser, State } from '../../constants/types';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport {\n  getTodos,\n  sortById,\n  sortByName,\n  sortByStatus,\n  sortByTitle,\n} from '../../store';\n\ninterface Props {\n  todos: TodoWithUser[];\n  sortByTitle: () => void;\n  sortByName: () => void;\n  sortByStatus: () => void;\n  sortById: () => void;\n}\n\nexport const TodoListTemplate: FC<Props> = (props) => {\n  return (\n    <table className=\"table is-hoverable\">\n      <thead className=\"thead\">\n        <tr className=\"tr\">\n          <th className=\"th\" onClick={props.sortById}>id</th>\n          <th className=\"th\" onClick={props.sortByTitle}>title</th>\n          <th className=\"th\" onClick={props.sortByStatus}>completed</th>\n          <th className=\"th\" onClick={props.sortByName}>user</th>\n          <th className=\"th\">Delete option</th>\n        </tr>\n      </thead>\n      <tbody className=\"tbody\">\n        {props.todos.map((todo: TodoWithUser) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapDispatchToProps = {\n  sortById,\n  sortByName,\n  sortByTitle,\n  sortByStatus,\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: getTodos(state),\n});\n\nexport const TodoList = connect(mapStateToProps, mapDispatchToProps)(TodoListTemplate);\n","import { USERS_URL, TOODS_URL, BASE_URL } from '../constants/api';\nimport {\n  Todo,\n  UserInterface,\n  TodoWithUser,\n} from '../constants/types';\n\nconst getDataFromServer = async <T>(url: string): Promise<T> => {\n  const data = await fetch(`${BASE_URL}${url}`);\n\n  return data.json();\n};\n\nconst getUsers: () => Promise<UserInterface[]> = async () => {\n  const users = await getDataFromServer<UserInterface[]>(USERS_URL);\n\n  return users;\n};\n\nconst getToddos: () => Promise<Todo[]> = async () => {\n  const todos = await getDataFromServer<Todo[]>(TOODS_URL);\n\n  return todos;\n};\n\nexport const getTodosWithUser: () => Promise<TodoWithUser[]> = async () => {\n  const [todos, users] = await Promise.all([\n    getToddos(),\n    getUsers(),\n  ]);\n\n  const todosWithUser = todos.map((todo: Todo) => {\n    const user = users.find((person: UserInterface) => person.id === todo.userId) as UserInterface;\n\n    return {\n      ...todo,\n      user,\n    };\n  });\n\n  return todosWithUser;\n};\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\nexport const USERS_URL = '/users';\nexport const TOODS_URL = '/todos';\n","import React, { FC } from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css';\nimport { connect } from 'react-redux';\nimport { TodoList } from './components/TodoList/TodoList';\nimport {\n  getLoading,\n  getTodos,\n  setLoading,\n  setTodos,\n} from './store';\nimport { getTodosWithUser } from './utils/api';\nimport { State, TodoWithUser } from './constants/types';\n\n\ninterface Props {\n  todos: TodoWithUser[];\n  isLoading: boolean;\n  setLoading: (value: boolean) => void;\n  setTodos: (value: TodoWithUser[]) => void;\n}\n\nconst App: FC<Props> = (props) => {\n  const handleStart = async () => {\n    props.setLoading(true);\n\n    const visibleTodos = await getTodosWithUser();\n\n    props.setTodos(visibleTodos);\n    props.setLoading(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      {!props.todos.length\n        ? (\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={handleStart}\n          >\n            {props.isLoading ? 'Loading.......' : 'Start load'}\n          </button>\n        ) : (\n          <TodoList />\n        )}\n    </div>\n  );\n};\n\nconst mapDispatchToProps = { setLoading, setTodos };\n\nconst mapStateToProps = (state: State) => ({\n  todos: getTodos(state),\n  isLoading: getLoading(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}